<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('TeamAdministrator', 'doctrine');

/**
 * BaseTeamAdministrator
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $event_id
 * @property string $first_name
 * @property string $last_name
 * @property string $username
 * @property string $password
 * @property string $email
 * @property string $team_name
 * @property Event $Event
 * @property Doctrine_Collection $Attendee
 * 
 * @method integer             getId()         Returns the current record's "id" value
 * @method integer             getEventId()    Returns the current record's "event_id" value
 * @method string              getFirstName()  Returns the current record's "first_name" value
 * @method string              getLastName()   Returns the current record's "last_name" value
 * @method string              getUsername()   Returns the current record's "username" value
 * @method string              getPassword()   Returns the current record's "password" value
 * @method string              getEmail()      Returns the current record's "email" value
 * @method string              getTeamName()   Returns the current record's "team_name" value
 * @method Event               getEvent()      Returns the current record's "Event" value
 * @method Doctrine_Collection getAttendee()   Returns the current record's "Attendee" collection
 * @method TeamAdministrator   setId()         Sets the current record's "id" value
 * @method TeamAdministrator   setEventId()    Sets the current record's "event_id" value
 * @method TeamAdministrator   setFirstName()  Sets the current record's "first_name" value
 * @method TeamAdministrator   setLastName()   Sets the current record's "last_name" value
 * @method TeamAdministrator   setUsername()   Sets the current record's "username" value
 * @method TeamAdministrator   setPassword()   Sets the current record's "password" value
 * @method TeamAdministrator   setEmail()      Sets the current record's "email" value
 * @method TeamAdministrator   setTeamName()   Sets the current record's "team_name" value
 * @method TeamAdministrator   setEvent()      Sets the current record's "Event" value
 * @method TeamAdministrator   setAttendee()   Sets the current record's "Attendee" collection
 * 
 * @package    registration
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTeamAdministrator extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('team_administrator');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('event_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('first_name', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('last_name', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('username', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('password', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('email', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('team_name', 'string', 64, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 64,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Event', array(
             'local' => 'event_id',
             'foreign' => 'id'));

        $this->hasMany('Attendee', array(
             'local' => 'id',
             'foreign' => 'team_administrator_id'));
    }
}